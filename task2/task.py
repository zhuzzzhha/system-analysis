from aiogram import Bot, Dispatcher
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
import asyncio
import logging
from aiogram.types import FSInputFile
from pathlib import Path


# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –£–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
API_TOKEN = "7754673241:AAGhe1h9muCl1W8B5aFreT0ihpLQxbu0u_Q"

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìö –ö—É—Ä—Å—ã")],
        [KeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")],
        [KeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")],
        [KeyboardButton(text="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")],
    ],
    resize_keyboard=True
)

courses_names = {"–ö–∞—Ä—Ç–∏–Ω–∞ –º–∞—Å–ª–æ–º –∑–∞ 3 —á–∞—Å–∞",
                 "–ö—É—Ä—Å –∂–∏–≤–æ–ø–∏—Å–∏ –º–∞—Å–ª–æ–º",
                 "–ò–Ω—Ç–µ—Ä—å–µ—Ä–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∞",
                 "Fashion-–∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è",
                 "–ê–∫–≤–∞—Ä–µ–ª—å",
                  "–†–∏—Å–æ–≤–∞–Ω–∏–µ –Ω–∞ –ø–ª–∞–Ω—à–µ—Ç–µ"
                 }

courses_menu = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="1", callback_data="course_1")],
        [InlineKeyboardButton(text="2", callback_data="course_2")],
        [InlineKeyboardButton(text="3", callback_data="course_3")],
        [InlineKeyboardButton(text="4", callback_data="course_4")],
        [InlineKeyboardButton(text="5", callback_data="course_5")],
        [InlineKeyboardButton(text="6", callback_data="course_6")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back")]
    ]
)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def send_welcome(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —à–∫–æ–ª—ã —Ä–∏—Å–æ–≤–∞–Ω–∏—è \"–ü–∏–∫–∞—Å—Å–æ\". –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
        reply_markup=main_menu
    )

# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üìö –ö—É—Ä—Å—ã"
# @dp.message(lambda message: message.text == "üìö –ö—É—Ä—Å—ã")
# async def courses(message: Message):
#     response = (
#         f"üé® –ù–∞—à–∏ –∫—É—Ä—Å—ã:\n"
#         "1. {courses_names[0]}\n"
#         "2. {courses_names[1]}\n"
#         "3. {courses_names[2]}\n"
#         "4. {courses_names[3]}\n"
#         "5. {courses_names[4]}\n"
#         "6. {courses_names[5]}\n\n"
#         "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –∫—É—Ä—Å–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏."
#     )
#     await message.answer(response, reply_markup=courses_menu)

# @dp.callback_query(lambda c: c.data.startswith("course_"))
# async def course_details(callback_query):
#     course_number = int(callback_query.data.split("_")[1])  # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∫—É—Ä—Å–∞ –∏–∑ callback_data
    
#     # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –∫—É—Ä—Å–∞
#     prompt = f"–ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞ –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º {courses_names[course_number - 1]} –≤ —à–∫–æ–ª–µ —Ä–∏—Å–æ–≤–∞–Ω–∏—è."
    
#     # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏
#     description = generate_response(prompt)  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –∫—É—Ä—Å–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–æ–¥–µ–ª–∏
    
#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
#     await callback_query.message.answer(description, reply_markup=courses_menu)
#     await callback_query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@dp.callback_query(lambda c: c.data == "back")
async def back_to_courses(callback_query):
    await callback_query.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:",
        reply_markup=courses_menu
    )
    await callback_query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
@dp.message(lambda message: message.text == "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def schedule(message: Message):
    response_text = (
        "üïí –ù–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n"
    )
    images_dir = Path(__file__).resolve().parent / "images"
    image_path = images_dir / "schedule.jpg"

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image = FSInputFile(image_path)  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
    await message.answer_photo(photo=image, caption=response_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"
@dp.message(lambda message: message.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def contacts(message: Message):
    response = (
        "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:\n"
        "–¢–µ–ª–µ—Ñ–æ–Ω: +7 (123) 456-78-90\n"
        "Email: info@picasso-school.com\n"
        "–ê–¥—Ä–µ—Å: —É–ª. –ò–º–ø—Ä–µ—Å—Å–∏–æ–Ω–∏—Å—Ç–æ–≤, –¥. 10, –≥. –ú–æ—Å–∫–≤–∞"
    )
    await message.answer(response)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"
@dp.message(lambda message: message.text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
async def ask_question(message: Message):
    await message.answer(
        "üì© –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ!"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
@dp.message()
async def handle_questions(message: Message):
    user_question = message.text
    await message.answer(
        "–í–∞—à –≤–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç! –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
    )
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    admin_id = 123456789  # –£–∫–∞–∂–∏—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await bot.send_message(admin_id, f"–í–æ–ø—Ä–æ—Å –æ—Ç {message.from_user.full_name}: {user_question}")

async def remove_webhook():
    await bot.delete_webhook()

async def main():
    # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã
    await remove_webhook()
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
